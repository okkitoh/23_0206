;
#pragma kernel RandomConeRays


#include "UnityCG.cginc" /* UNITY_PI */
#include "rand.cginc"

/*
Referenced from C# script using ComputeShader.FindKernel("RandomConeRays") to get handle.
ComputeShader reference to file must be created and linked to C# script via SerializeField.
Otherwise, it would be like trying to search a non-existent file for a keyword.

random radius
random angle
convert from polar to cartesian coordinates.
x = r * cos (theta)
y = r * sin (theta)

In model space, cone is defined as having a base with radius r centered at origin.
The height h of the cone moves up along the y+ axis to form the apex per unity's preferred 
axis orientation.

Because we're using script attached to gameobject, we get nice luxury of
handling all particle rotations at once in view space rather than model space.
*/

uniform float dt; /* Set externally with Shader.SetFloat("dt", Time.deltaTime) */
//uniform float dx;
uniform float h;
//uniform float et;
RWStructuredBuffer<float3> Result; /* store render positions of particles */


[numthreads(32,1,1)]
void RandomConeRays(uint3 id : SV_DispatchThreadID) {
    float R = mtwist(id.x);
    float R2 = random(float2(R, UNITY_PI));
    float r = R * 5;
    float theta = R2 * UNITY_TWO_PI;
    float3 target = float3(r*cos(theta), h, r*sin(theta));
    float3 n = normalize(target);
    float v = (-0.4 /*lambda*/ * log(1 - R) * 30 /*v_max*/) + 10 /*v_min*/;
    Result[id.x] = Result[id.x] + (v * n * dt);
}
